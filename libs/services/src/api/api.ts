/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
    /**
     * 
     * @type {number}
     * @memberof CreateOrderDto
     */
    'sale_type_id': number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'order_code'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderDto
     */
    'credit_company_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderDto
     */
    'customer_id': number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderDto
     */
    'closing_date_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderDto
     */
    'deposit_date_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderDto
     */
    'department_id': number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderDto
     */
    'manager_id': number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'order_status': CreateOrderDtoOrderStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'billing_status': CreateOrderDtoBillingStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'billing_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'planned_deposit_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'deposit_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'deposit_status': CreateOrderDtoDepositStatusEnum;
    /**
     * 
     * @type {CreateOrderTaxDto}
     * @memberof CreateOrderDto
     */
    'tax'?: CreateOrderTaxDto;
    /**
     * 
     * @type {Array<CreateOrderProductDto>}
     * @memberof CreateOrderDto
     */
    'products': Array<CreateOrderProductDto>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateOrderDtoOrderStatusEnum {
    Unresolved = 'unresolved',
    Delivered = 'delivered'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateOrderDtoBillingStatusEnum {
    Unbilled = 'unbilled',
    Billed = 'billed'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateOrderDtoDepositStatusEnum {
    Undeposited = 'undeposited',
    Deposited = 'deposited'
}

/**
 * 
 * @export
 * @interface CreateOrderProductDto
 */
export interface CreateOrderProductDto {
    /**
     * 
     * @type {number}
     * @memberof CreateOrderProductDto
     */
    'product_id': number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderProductDto
     */
    'order_product_name': string;
    /**
     * 
     * @type {CreateOrderTaxDto}
     * @memberof CreateOrderProductDto
     */
    'tax'?: CreateOrderTaxDto;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderProductDto
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderProductDto
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderProductDto
     */
    'unit_id'?: number;
}
/**
 * 
 * @export
 * @interface CreateOrderTaxDto
 */
export interface CreateOrderTaxDto {
    /**
     * 
     * @type {number}
     * @memberof CreateOrderTaxDto
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderTaxDto
     */
    'rate': number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderTaxDto
     */
    'round_type': CreateOrderTaxDtoRoundTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateOrderTaxDtoRoundTypeEnum {
    _0 = '0',
    _1 = '1',
    _2 = '2'
}


/**
 * 
 * @export
 * @interface FindOrderDto
 */
export interface FindOrderDto {
    /**
     * 
     * @type {number}
     * @memberof FindOrderDto
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindOrderDto
     */
    'limit'?: number;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'order_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'customer'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof FindOrderDto
     */
    'product_id'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof FindOrderDto
     */
    'sale_type_id'?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FindOrderDto
     */
    'order_status'?: Array<FindOrderDtoOrderStatusEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FindOrderDto
     */
    'billing_status'?: Array<FindOrderDtoBillingStatusEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FindOrderDto
     */
    'deposit_status'?: Array<FindOrderDtoDepositStatusEnum>;
    /**
     * 
     * @type {number}
     * @memberof FindOrderDto
     */
    'amount_with_tax_from'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindOrderDto
     */
    'amount_with_tax_to'?: number;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'create_date_from'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'create_date_to'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'billing_date_from'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'billing_date_to'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'planned_deposit_date_from'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'planned_deposit_date_to'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'deposit_date_from'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindOrderDto
     */
    'deposit_date_to'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FindOrderDtoOrderStatusEnum {
    Unresolved = 'unresolved',
    Delivered = 'delivered'
}
/**
    * @export
    * @enum {string}
    */
export enum FindOrderDtoBillingStatusEnum {
    Unbilled = 'unbilled',
    Billed = 'billed'
}
/**
    * @export
    * @enum {string}
    */
export enum FindOrderDtoDepositStatusEnum {
    Undeposited = 'undeposited',
    Deposited = 'deposited'
}

/**
 * 
 * @export
 * @interface MePermissionDto
 */
export interface MePermissionDto {
    /**
     * 
     * @type {number}
     * @memberof MePermissionDto
     */
    'id': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof MePermissionDto
     */
    'permissions': Array<string>;
}
/**
 * 
 * @export
 * @interface OrderDepositDto
 */
export interface OrderDepositDto {
    /**
     * 
     * @type {Array<number>}
     * @memberof OrderDepositDto
     */
    'order_ids': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof OrderDepositDto
     */
    'deposit_date': string;
}
/**
 * 
 * @export
 * @interface StatisticOrderDto
 */
 export interface StatisticOrderDto {
    /**
     * 
     * @type {number}
     * @memberof StatisticOrderDto
     */
    'year': number;
    /**
     * 
     * @type {number}
     * @memberof StatisticOrderDto
     */
    'department_id'?: number;
}

/**
 * 
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'create_date': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'update_date': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'create_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'update_id': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'order_code': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'sale_type_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'credit_company_id': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'customer_id': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'closing_date_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'deposit_date_id': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'department_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'manager_id': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'note': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'order_status': OrderDtoOrderStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'billing_status': OrderDtoBillingStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'billing_date': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'planned_deposit_date': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'deposit_date': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'deposit_status': OrderDtoDepositStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'tax_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'amount': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'amount_with_tax': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'buy_amount': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'buy_amount_with_tax': number;
    /**
     * 
     * @type {CustomerBasicDto}
     * @memberof OrderDto
     */
    'customer': CustomerBasicDto;

    /**
     * 
     * @type {Array<OrderProductDto>}
     * @memberof OrderDto
     */
    'products': Array<OrderProductDto>;

}
/**
 * 
 * @export
 * @interface CustomerBasicDto
 */
 export interface CustomerBasicDto {
    /**
     * 
     * @type {number}
     * @memberof CustomerBasicDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CustomerBasicDto
     */
    'customer_code': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerBasicDto
     */
    'contractor_id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerBasicDto
     */
    'contractor_name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerBasicDto
     */
    'contractor_furigana': string;
}
/**
    * @export
    * @enum {string}
    */
export enum OrderDtoOrderStatusEnum {
    Unresolved = 'unresolved',
    Delivered = 'delivered'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderDtoBillingStatusEnum {
    Unbilled = 'unbilled',
    Billed = 'billed'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderDtoDepositStatusEnum {
    Undeposited = 'undeposited',
    Deposited = 'deposited'
}

/**
 * 
 * @export
 * @interface OrderProductDto
 */
export interface OrderProductDto {
    /**
     * 
     * @type {number}
     * @memberof OrderProductDto
     */
    'order_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderProductDto
     */
    'product_id': number;
    /**
     * 
     * @type {string}
     * @memberof OrderProductDto
     */
    'order_product_name': string;
    /**
     * 
     * @type {number}
     * @memberof OrderProductDto
     */
    'unit_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderProductDto
     */
    'tax_id': number;
    /**
     * 
     * @type {number}
     * @memberof OrderProductDto
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof OrderProductDto
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface OrderStatisticDto
 */
export interface OrderStatisticDto {
    /**
     * 
     * @type {number}
     * @memberof OrderStatisticDto
     */
    'month': number;
    /**
     * 
     * @type {number}
     * @memberof OrderStatisticDto
     */
    'amount_with_tax': number;
    /**
     * 
     * @type {number}
     * @memberof OrderStatisticDto
     */
    'buy_amount_with_tax': number;
}

/**
 * 
 * @export
 * @interface PaginatedOrderDto
 */
export interface PaginatedOrderDto {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOrderDto
     */
    'total': number;
    /**
     * 
     * @type {Array<OrderDto>}
     * @memberof PaginatedOrderDto
     */
    'data': Array<OrderDto>;
}
/**
 * 
 * @export
 * @interface PaginatedPermissionDto
 */
export interface PaginatedPermissionDto {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPermissionDto
     */
    'total': number;
    /**
     * 
     * @type {Array<PermissionDto>}
     * @memberof PaginatedPermissionDto
     */
    'data': Array<PermissionDto>;
}
/**
 * 
 * @export
 * @interface ProfiledDto
 */
 export interface ProfiledDto {
    /**
     * 
     * @type {number}
     * @memberof ProfiledDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProfiledDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ProfiledDto
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProfiledDto
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProfiledDto
     */
    'first_name_kana': string;
    /**
     * 
     * @type {string}
     * @memberof ProfiledDto
     */
    'last_name_kana': string;
    /**
     * 
     * @type {string}
     * @memberof ProfiledDto
     */
    'phone_number': string;

    /**
     * 
     * @type {number}
     * @memberof ProfiledDto
     */
    'role_id': number;

}
/**
 * 
 * @export
 * @interface PermissionDto
 */
export interface PermissionDto {
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    'create_date': string;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    'update_date': string;
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    'create_id': number;
    /**
     * 
     * @type {number}
     * @memberof PermissionDto
     */
    'update_id': number;
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    'permission_name': PermissionDtoPermissionNameEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PermissionDtoPermissionNameEnum {
    Dashboard = 'dashboard',
    Datalinkage = 'datalinkage',
    OrderList = 'order.list',
    OrderWrite = 'order.write',
    PurchaseList = 'purchase.list',
    Budget = 'budget',
    User = 'user',
    Master = 'master'
}

/**
 * 
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'create_date': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'update_date': string;
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    'create_id': number;
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    'update_id': number;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'product_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'sku': string;
}

/**
 * 
 * @export
 * @interface UpdateOrderDto
 */
export interface UpdateOrderDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'order_code'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderDto
     */
    'sale_type_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderDto
     */
    'credit_company_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderDto
     */
    'customer_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderDto
     */
    'closing_date_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderDto
     */
    'deposit_date_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderDto
     */
    'department_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderDto
     */
    'manager_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'order_status'?: UpdateOrderDtoOrderStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'billing_status'?: UpdateOrderDtoBillingStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'billing_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'planned_deposit_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'deposit_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderDto
     */
    'deposit_status'?: UpdateOrderDtoDepositStatusEnum;
    /**
     * 
     * @type {CreateOrderTaxDto}
     * @memberof UpdateOrderDto
     */
    'tax'?: CreateOrderTaxDto;
    /**
     * 
     * @type {Array<CreateOrderProductDto>}
     * @memberof UpdateOrderDto
     */
    'products': Array<CreateOrderProductDto>;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateOrderDtoOrderStatusEnum {
    Unresolved = 'unresolved',
    Delivered = 'delivered'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateOrderDtoBillingStatusEnum {
    Unbilled = 'unbilled',
    Billed = 'billed'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateOrderDtoDepositStatusEnum {
    Undeposited = 'undeposited',
    Deposited = 'deposited'
}


/**
 * 
 * @export
 * @interface UserLoginDto
 */
export interface UserLoginDto {
    /**
     * 
     * @type {string}
     * @memberof UserLoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginDto
     */
    'password': string;
}

/**
 * 
 * @export
 * @interface VerifyResetPasswordDto
 */
export interface VerifyResetPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyResetPasswordDto
     */
    'resetToken': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckLoginStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/check-login-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerUserLogin: async (userLoginDto: UserLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginDto' is not null or undefined
            assertParamExists('authControllerUserLogin', 'userLoginDto', userLoginDto)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCheckLoginStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCheckLoginStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerUserLogin(userLoginDto: UserLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerUserLogin(userLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckLoginStatus(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerCheckLoginStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerUserLogin(userLoginDto: UserLoginDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerUserLogin(userLoginDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerCheckLoginStatus(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerCheckLoginStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLoginDto} userLoginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerUserLogin(userLoginDto: UserLoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerUserLogin(userLoginDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * MeApi - axios parameter creator
 * @export
 */
export const MeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meControllerGetPermissions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/me/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meControllerGetProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/me/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeApi - functional programming interface
 * @export
 */
export const MeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeApiAxiosParamCreator(configuration)
    return {

        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meControllerGetPermissions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePermissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meControllerGetPermissions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meControllerGetProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfiledDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meControllerGetProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeApi - factory interface
 * @export
 */
export const MeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeApiFp(configuration)
    return {
        
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meControllerGetPermissions(options?: any): AxiosPromise<MePermissionDto> {
            return localVarFp.meControllerGetPermissions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meControllerGetProfile(options?: any): AxiosPromise<ProfiledDto> {
            return localVarFp.meControllerGetProfile(options).then((request) => request(axios, basePath));
        },
        
    };
};

/**
 * MeApi - object-oriented interface
 * @export
 * @class MeApi
 * @extends {BaseAPI}
 */
export class MeApi extends BaseAPI {
    

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public meControllerGetPermissions(options?: AxiosRequestConfig) {
        return MeApiFp(this.configuration).meControllerGetPermissions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public meControllerGetProfile(options?: AxiosRequestConfig) {
        return MeApiFp(this.configuration).meControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    
}


/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCreate: async (createOrderDto: CreateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderDto' is not null or undefined
            assertParamExists('orderControllerCreate', 'createOrderDto', createOrderDto)
            const localVarPath = `/api/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerDeleteById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerDeleteById', 'id', id)
            const localVarPath = `/api/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrderDepositDto} orderDepositDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerDepositOrder: async (orderDepositDto: OrderDepositDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderDepositDto' is not null or undefined
            assertParamExists('orderControllerDepositOrder', 'orderDepositDto', orderDepositDto)
            const localVarPath = `/api/order-deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDepositDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindOrderDto} findOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFind: async (findOrderDto: FindOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findOrderDto' is not null or undefined
            assertParamExists('orderControllerFind', 'findOrderDto', findOrderDto)
            const localVarPath = `/api/order-find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFindByIdOrFail: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerFindByIdOrFail', 'id', id)
            const localVarPath = `/api/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StatisticOrderDto} statisticOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerStatistic: async (statisticOrderDto: StatisticOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statisticOrderDto' is not null or undefined
            assertParamExists('orderControllerStatistic', 'statisticOrderDto', statisticOrderDto)
            const localVarPath = `/api/order-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(statisticOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateOrderDto} updateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerUpdateById: async (id: number, updateOrderDto: UpdateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerUpdateById', 'id', id)
            // verify required parameter 'updateOrderDto' is not null or undefined
            assertParamExists('orderControllerUpdateById', 'updateOrderDto', updateOrderDto)
            const localVarPath = `/api/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerCreate(createOrderDto: CreateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerCreate(createOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerDeleteById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OrderDepositDto} orderDepositDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerDepositOrder(orderDepositDto: OrderDepositDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerDepositOrder(orderDepositDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FindOrderDto} findOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerFind(findOrderDto: FindOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerFind(findOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerFindByIdOrFail(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerFindByIdOrFail(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {StatisticOrderDto} statisticOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerStatistic(statisticOrderDto: StatisticOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderStatisticDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerStatistic(statisticOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateOrderDto} updateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerUpdateById(id: number, updateOrderDto: UpdateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerUpdateById(id, updateOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCreate(createOrderDto: CreateOrderDto, options?: any): AxiosPromise<OrderDto> {
            return localVarFp.orderControllerCreate(createOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerDeleteById(id: number, options?: any): AxiosPromise<OrderDto> {
            return localVarFp.orderControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderDepositDto} orderDepositDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerDepositOrder(orderDepositDto: OrderDepositDto, options?: any): AxiosPromise<boolean> {
            return localVarFp.orderControllerDepositOrder(orderDepositDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindOrderDto} findOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFind(findOrderDto: FindOrderDto, options?: any): AxiosPromise<PaginatedOrderDto> {
            return localVarFp.orderControllerFind(findOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFindByIdOrFail(id: number, options?: any): AxiosPromise<OrderDto> {
            return localVarFp.orderControllerFindByIdOrFail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StatisticOrderDto} statisticOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerStatistic(statisticOrderDto: StatisticOrderDto, options?: any): AxiosPromise<Array<OrderStatisticDto>> {
            return localVarFp.orderControllerStatistic(statisticOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateOrderDto} updateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerUpdateById(id: number, updateOrderDto: UpdateOrderDto, options?: any): AxiosPromise<OrderDto> {
            return localVarFp.orderControllerUpdateById(id, updateOrderDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @param {CreateOrderDto} createOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderControllerCreate(createOrderDto: CreateOrderDto, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerCreate(createOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderControllerDeleteById(id: number, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderDepositDto} orderDepositDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderControllerDepositOrder(orderDepositDto: OrderDepositDto, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerDepositOrder(orderDepositDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindOrderDto} findOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderControllerFind(findOrderDto: FindOrderDto, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerFind(findOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderControllerFindByIdOrFail(id: number, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerFindByIdOrFail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StatisticOrderDto} statisticOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderControllerStatistic(statisticOrderDto: StatisticOrderDto, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerStatistic(statisticOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateOrderDto} updateOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public orderControllerUpdateById(id: number, updateOrderDto: UpdateOrderDto, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerUpdateById(id, updateOrderDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermissionApi - axios parameter creator
 * @export
 */
export const PermissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [permissionName] 
         * @param {boolean} [isAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionControllerFind: async (page?: number, limit?: number, permissionName?: string, isAll?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/permission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (permissionName !== undefined) {
                localVarQueryParameter['permission_name'] = permissionName;
            }

            if (isAll !== undefined) {
                localVarQueryParameter['is_all'] = isAll;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionApi - functional programming interface
 * @export
 */
export const PermissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [permissionName] 
         * @param {boolean} [isAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permissionControllerFind(page?: number, limit?: number, permissionName?: string, isAll?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPermissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permissionControllerFind(page, limit, permissionName, isAll, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionApi - factory interface
 * @export
 */
export const PermissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [permissionName] 
         * @param {boolean} [isAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionControllerFind(page?: number, limit?: number, permissionName?: string, isAll?: boolean, options?: any): AxiosPromise<PaginatedPermissionDto> {
            return localVarFp.permissionControllerFind(page, limit, permissionName, isAll, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
export class PermissionApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [permissionName] 
     * @param {boolean} [isAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public permissionControllerFind(page?: number, limit?: number, permissionName?: string, isAll?: boolean, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).permissionControllerFind(page, limit, permissionName, isAll, options).then((request) => request(this.axios, this.basePath));
    }
}
